# -*- coding: utf-8 -*-
"""Kernel_k_Means_sub.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iUFAdWKL-1PPSOJwr2U3YhYQJqHHmMQA
"""

import numpy as np
from matplotlib import pyplot as plt
from matplotlib.pyplot import cm



def initCluster(X, k):
    ClusterMemberNew = [[] for i in range(k)]
    shuffledData = X
    np.random.shuffle(shuffledData)
    for i in range(0, X.shape[0]):
        ClusterMemberNew[i%k].append(X[i,:])
    return ClusterMemberNew

def calculate_centroid(InitMember,c):
    centroid = np.ndarray(shape=(0, c))
    for i in range(0, k):
      Cluster_member = np.asmatrix(InitMember[i])
      centroidCluster = Cluster_member.mean(axis=0)
      centroid = np.concatenate((centroid, centroidCluster), axis=0)
    return centroid


def RbfKernel(data1, data2):
    var = 5
    delta =abs(np.subtract(data1, data2))
    squaredEuclidean = (np.square(delta).sum(axis=1))
    result = np.exp(-(squaredEuclidean)/(2*var**2))
    return result

def xn2xn(Cluster_member):
    result = 0
    n=Cluster_member.shape[0]
    for i in range(0, n):
        for j in range(0, n):
            result = result + RbfKernel(Cluster_member[i, :], Cluster_member[j, :])
    result = result / (n ** 2)
    return result

def xn2un(dataI, Cluster_member):
    result = 0
    n=Cluster_member.shape[0]
    for i in range(0, n):
        result = result + RbfKernel(dataI, Cluster_member[i,:])
    return 2 * result / n


def assignCluster(data,InitMember):
    Kernel_Cluster = np.ndarray(shape=(data.shape[0], 0))

    #assign data to cluster whose centroid is the closest one
    for i in range(0, k):
        temp1 = xn2xn(np.asmatrix(InitMember[i]))
        mat_temp1 = np.asmatrix(np.repeat(temp1, data.shape[0], axis=0)) 
 

        mat_temp2 = np.ndarray(shape=(0,1))         
        for j in range(0, data.shape[0]):
            temp2 = xn2un(data[j,:], np.asmatrix(InitMember[i]))
            mat_temp2 = np.asmatrix(np.concatenate((mat_temp2, temp2), axis=0))

        temp3 = np.add(-1*mat_temp2, mat_temp1)
        Kernel_Cluster =np.concatenate((Kernel_Cluster, temp3), axis=1)
    clusterMatrix = np.array(np.argmin(np.matrix(Kernel_Cluster), axis=1)).flatten()
    print("clusterMatrix",clusterMatrix)
    return clusterMatrix

def assignDataTocluster(data,clusterMatrix):
    ClusterMemberNew = [[] for l in range(k)]
    for i in range(0, data.shape[0]):
        ClusterMemberNew[clusterMatrix[i]].append(data[i,:])

    return ClusterMemberNew 
    


def isConversed(InitMember,ClusterMemberNew):
    flag = True
    for m in range(0, k):
        mi = np.asmatrix(InitMember[m])
        lc = np.asmatrix(ClusterMemberNew[m])
        if (mi.shape[0] != lc.shape[0]):
            flag = False
            break
        if (mi.shape[0] == lc.shape[0]):
            flag1 = (mi == lc).all()
        flag = flag and flag1
        if(flag==False):
          break
        return  flag 

def plotResult(ClusterMemberNew, centroid):
    n = len(ClusterMemberNew)
    color = iter(cm.rainbow(np.linspace(0, 1, n)))
    plt.title("Clustered Data")
    for i in range(n):
        col = next(color)
        Cluster_member = np.asmatrix(ClusterMemberNew[i])
        plt.scatter(np.array(Cluster_member[:, 0]).flatten(), np.array(Cluster_member[:, 1]).flatten(), marker=".", s=100, c=col)
    color = iter(cm.rainbow(np.linspace(0, 1, n)))
    for i in range(n):
        col = next(color)
        plt.scatter(np.array(centroid[i, 0]).flatten(), np.array(centroid[i, 1]).flatten(), marker="*", s=400, c=col, edgecolors="black")
    plt.show()

def kMeansKernel(data,InitMember,k):

    while(True):
        centroid=calculate_centroid(InitMember,data.shape[1])       
        plotResult(InitMember, centroid)
        
        #assign cluster whose centroid is the closest
        clusterMatrix=assignCluster(data,InitMember)        
        
        #assign data to cluster regarding cluster matrix
        ClusterMemberNew=assignDataTocluster(data,clusterMatrix)

        #Checking for convergence
        if(isConversed(InitMember,ClusterMemberNew)):
          break

        InitMember = ClusterMemberNew

    return ClusterMemberNew, centroid

if __name__ == "__main__": 
    X = np.loadtxt("test1_data.txt", delimiter=" ")   
    X = np.loadtxt("test2_data.txt", delimiter=" ")
    X = np.loadtxt("test5.txt", delimiter=" ")
    
    #number of cluster
    k = int(input("Enter the number of cluster: ")) 
    InitMember = initCluster(X, k)
    clusterResult, centroid = kMeansKernel(X,InitMember,k)
    plotResult(clusterResult, centroid)
    print("Data Clustered")