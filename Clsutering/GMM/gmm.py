# -*- coding: utf-8 -*-
"""gmm_sub.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lB0MyODZbItmtFLyYky06lIM7EHZ1uXl
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import multivariate_normal
from matplotlib.pyplot import cm
import warnings
warnings.filterwarnings("ignore", category=FutureWarning)
import random


def initialisation(X, k):
    n, m = X.shape
    phi = np.full(k,1/k)
    responsibility = np.full(X.shape,1/k)
    r = np.random.randint(0,n,k)
    mu = [  X[i,:] for i in r ]
    sigma = [ np.cov(X.T) for _ in range(k) ]
    
    return phi, responsibility, mu, sigma
    

def Expectation_Maximization(X):
    
    for iteration in list(range(max_iter)):
        #--------------Expectation step----------------- 
        responsibility = cal_probability(X)
        phi = responsibility.mean(axis=0)
        
        #--------------Maximization step-----------------
        for i in range(k):
            weight = responsibility[:, [i]]
            total_weight = weight.sum()
            mu[i] = (X * weight).sum(axis=0) / total_weight
            sigma[i] = np.cov(X.T,aweights=(weight/total_weight).flatten(), bias=True)
    return mu , sigma
        
            
def cal_probability(X):
        likelihood = np.zeros( (X.shape[0], k) )
        for i in range(k):
            likelihood[:,i] = multivariate_normal( mu[i],sigma[i]).pdf(X)
        
        a = likelihood * phi
        b = a.sum(axis=1)[:, np.newaxis]

        return (a / b)
    
def predict_cluster(X):
        responsibility = cal_probability(X)
        return np.argmax(responsibility, axis=1)

def plot_clusters(X,clusters): 
        n=len(np.unique(clusters))     
        colors = np.array(["blue", "green", "red", "gray", "yellow", "magenta","Brown",
                           "Azure","Gray","Orange","Maroon","Charcoal",
                           "Aquamarine","Coral","Fuchsia","Wheat"])
        
        plt.title("Clustered data")        
        for c in range(n):
            for i in range(X.shape[0]):
                if(clusters[i] == c):
                    plt.scatter(X[i][0],X[i][1], marker=".", s = 100, c = colors[c])
                    
        plt.show()

if __name__ == '__main__':
    X = np.loadtxt("test2_data.txt", delimiter=" ")
    X = np.loadtxt("test5.txt", delimiter=" ")
    X = np.loadtxt("test1_data.txt", delimiter=" ")
    max_iter = 1000
    k = int(input("Enter the number of cluster: ")) 
    
    #initialize parameters
    phi, responsibility , mu, sigma  = initialisation(X, k)
    
    mu, sigma = Expectation_Maximization(X)
    clusters = predict_cluster(X)
    plot_clusters(X,clusters)

